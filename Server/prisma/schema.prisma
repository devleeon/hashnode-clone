datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/generated/typegraphql-prisma"
}

model Post {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt()
  title         String
  content       String
  text          String      @default("")
  published     Boolean     @default(false)
  photo         String?     
  author        User        @relation(fields: [authorId], references: [id])
  authorId      String
  likes         Like[]
  likesCount    Int         @default(0)
  bookmarked    Bookmark[]
  tags          Tags[]      @relation("TagPosts", references: [id])
  comments      Comment[]
}

model User {
  id            String      @id @default(uuid())
  email         String      @unique
  username      String
  password      String
  firstname     String      @default("")
  lastname      String      @default("")
  avatar        String      @default("")
  cover         String      @default("")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt()
  followedBy    User[]      @relation("UserFollows", references: [id])
  following     User[]      @relation("UserFollows", references: [id])
  likes         Like[]
  bookmarks     Bookmark[]
  followingTags Tags[]      @relation("TagFollows", references: [id])
  comments      Comment[]
  blog          Blog?
  posts         Post[]

}

model Blog{
  id            String      @id @default(uuid())
  name          String      
  address       String      @default("")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt()
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  monthlyScore  Int         @default(0)  
  weeklyScore   Int         @default(0)  
}

model Like{
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  post          Post        @relation(fields: [postId], references: [id])
  postId        String
}

model Comment{
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  post          Post        @relation(fields: [postId], references: [id])
  postId        String
}

model Bookmark{
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  post          Post        @relation(fields: [postId], references: [id])
  postId        String
}

model Tags{
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt()
  name          String      @unique
  followers     User[]      @relation("TagFollows", references: [id])
  followCount   Int         @default(0)
  posts         Post[]      @relation("TagPosts", references: [id])
  postsThisweek Int         @default(0)
  explain       String      @default("")
  image         String      @default("")
}